URLs with corresponding HTTP Methods and the Purpose
1. /api/auth/register/	--> POST --> Register a new user
2. /api/auth/login/ -->	POST --> Obtain JWT access & refresh tokens (login)
3. /api/auth/token/refresh/ --> POST --> Refresh JWT access token
4. /api/auth/activate/<uidb64>/<token>/ --> GET --> Activate a user account using emailed token
5. /api/auth/password-reset/ --> POST --> Request password reset by submitting email
6. /api/auth/password-reset-confirm/<uidb64>/<token>/ --> POST --> Confirm password reset and set new password
7. api/auth/search --> post and get -->for all searches [id, origin, destination, time, mode]
8. api/auth/places --> post and get --> for favorite places [id, address, type]
9. api/auth/track -->get --> for tracking activity of users it takes [id] and turns origin, destination, time, and mode
10. api/auth/booking --> post and get --> to book a trip [id, origin, destination, time, mode]
11. api/auth/feedback --> post --> to send a feedback
12. api/auth/profile --> get and put --> to get user info and favorate places and update user info
13. api/auth/places/place_id --> put --> to update/modify/ delete favorate places
14. api/auth/logout -->post --> for logot using refresh and access tokens
15. api/auth/plan-trip/ -->post and get --> to request transportation data from OTP server

--------------------------------------------------------------------------------------------------------------------

for admin

username: somos
email: info@somos.srl
password: somos@9364.attr.478



1. Support Trip Planning API for Both Authenticated and Anonymous Users

- The system must accept trip planning requests from users with or without authentication.

- For authenticated users, trip data must be saved linked to their user ID.

- For anonymous users, trip data must be saved linked to their session key.

2. Call External GraphQL API for Trip Planning

- The API endpoint must send trip details (origin, destination, date) to an external GraphQL service.

- Receive and parse the itineraries response and extract relevant trip details like modes of transport.

3. Save Trip Search Data with Relevant Metadata

- Save origin/destination coordinates, trip date, modes of transport, and requested timestamp.

- Save associated user ID for authenticated users or session key for anonymous users.

4. Session Management for Anonymous Users

- Ensure that anonymous users have a session key generated and maintained.

- Save their trip search data using this session key.

5. Admin Interface Displays Conditional Columns

- In Django Admin, show user_id for searches made by authenticated users.

- For anonymous user searches, show session key instead.

- Provide meaningful display of origin and destination coordinates.

6. Data Linking After User Login

- When an anonymous user logs in, transfer or link their previous sessionâ€™s trip data to their user account to unify the history.

