URLs with corresponding HTTP Methods and the Purpose
1. /api/auth/register/	--> POST --> Register a new user
2. /api/auth/login/ -->	POST --> Obtain JWT access & refresh tokens (login)
3. /api/auth/token/refresh/ --> POST --> Refresh JWT access token
4. /api/auth/activate/<uidb64>/<token>/ --> GET --> Activate a user account using emailed token
5. /api/auth/password-reset/ --> POST --> Request password reset by submitting email
6. /api/auth/password-reset-confirm/<uidb64>/<token>/ --> POST --> Confirm password reset and set new password
7. api/auth/search --> post and get -->for all searches [id, origin, destination, time, mode]
8. api/auth/places --> post and get --> for favorite places [id, address, type]
9. api/auth/track -->get --> for tracking activity of users it takes [id] and turns origin, destination, time, and mode
10. api/auth/booking --> post and get --> to book a trip [id, origin, destination, time, mode]
11. api/auth/feedback --> post --> to send a feedback
12. api/auth/profile --> get and put --> to get user info and favorate places and update user info
13. api/auth/places/place_id --> put --> to update/modify/ delete favorate places
14. api/auth/logout -->post --> for logot using refresh and access tokens
15. api/auth/plan-trip/ -->post and get --> to request transportation data from OTP server
16. api/auth/stops/--> post and get --> to get all stops in the server
17. api/auth/station/<str:stop_id>/ --> post and get --> QR code at each station that, when scanned, shows all bus arrivals and departures from scanned time until midnight

--------------------------------------------------------------------------------------------------------------------

for admin

username: somos
email: info@somos.srl
password: somos@9364.attr.478



1. Support Trip Planning API for Both Authenticated and Anonymous Users

- The system must accept trip planning requests from users with or without authentication.

- For authenticated users, trip data must be saved linked to their user ID.

- For anonymous users, trip data must be saved linked to their session key.

2. Call External GraphQL API for Trip Planning

- The API endpoint must send trip details (origin, destination, date) to an external GraphQL service.

- Receive and parse the itineraries response and extract relevant trip details like modes of transport.

3. Save Trip Search Data with Relevant Metadata

- Save origin/destination coordinates, trip date, modes of transport, and requested timestamp.

- Save associated user ID for authenticated users or session key for anonymous users.

4. Session Management for Anonymous Users

- Ensure that anonymous users have a session key generated and maintained.

- Save their trip search data using this session key.

5. Admin Interface Displays Conditional Columns

- In Django Admin, show user_id for searches made by authenticated users.

- For anonymous user searches, show session key instead.

- Provide meaningful display of origin and destination coordinates.

6. Data Linking After User Login

- When an anonymous user logs in, transfer or link their previous sessionâ€™s trip data to their user account to unify the history.

--------------------------------------------------------
for this API. api/auth/plan-trip/

1. Input Handling & Validation:

- Receives a POST request with trip details (fromLat, fromLon, toLat, toLon, date, time, and mode).
- Validates input using a serializer (PlanTripSerializer).
- Requires the mode parameter (e.g., WALK, BUS, BICYCLE, SCOOTER, ALL).
- Handles the time parameter flexibly: if missing or "timenow", defaults to current time; enforces "HH:MM:SS" format.

2. Stops Fetching and Closest Stop Calculation:

- Queries an external GraphQL API for all transit stops.
- Uses the Haversine formula to compute distances and find the closest stops to the user's start (fromLat, fromLon) and destination (toLat, toLon).

3. Trip Planning Query:

- Sends another GraphQL query to the external API to get trip itineraries between the start and destination points, on the requested date and time.
- Retrieves trip itineraries with detailed legs including modes, start/end times, stop names, and bus route numbers.

4. Filtering and Formatting Itineraries:

- Filters itineraries based on the requested mode:
- "ALL" returns all itineraries.
- "WALK" returns only itineraries consisting of walking legs.
- "BUS", "BICYCLE", "SCOOTER" include itineraries that contain those modes.
- Formats the legs of each itinerary into human-readable strings describing the trip steps with duration and times.

5. Data Persistence:

- Stores the search query in the Search model, recording the user (or anonymous session), coordinates, trip date/time, and mode filter.

6. Response:

Returns JSON with:

- Names of closest from/to stations.
- A dictionary of options grouped by primary mode (walk, bus, bicycle, scooter, other), each containing textual descriptions of trip options.

7. Error Handling:

- Handles input validation errors.
- Handles network errors or API errors with appropriate HTTP responses.


{
  "fromLat": 39.35589,
  "fromLon": 16.22727,
  "toLat": 39.35331,
  "toLon": 16.24230,
  "date": "2025-06-06",
  "time": "17:00:00",
  "mode": "bus"
}

{
  "fromLat": 39.35589,
  "fromLon": 16.22727,
  "toLat": 39.35331,
  "toLon": 16.24230,
  "date": "2025-06-06",
  "time": "17:00:00",
  "mode": "all"
}

{
  "fromLat": 39.35589,
  "fromLon": 16.22727,
  "toLat": 39.35331,
  "toLon": 16.24230,
  "date": "2025-06-06",
  "time": "17:00:00",
  "mode": "walk"
}

{
  "fromLat": 39.35589,
  "fromLon": 16.22727,
  "toLat": 39.35331,
  "toLon": 16.24230,
  "date": "2025-06-06",
  "time": "timenow",
  "mode": "bus"
}

{
  "fromLat": 39.35589,
  "fromLon": 16.22727,
  "toLat": 39.35331,
  "toLon": 16.24230,
  "date": "2025-06-06",
  "time": "timenow",
  "mode": "walk"
}

{
  "fromLat": 39.35589,
  "fromLon": 16.22727,
  "toLat": 39.35331,
  "toLon": 16.24230,
  "date": "2025-06-06",
  "time": "timenow",
  "mode": "all"
}