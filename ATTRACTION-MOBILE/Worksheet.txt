ATTRACTION MOBILE - WORKSHEET
--------------------------------------

1. Initial Configuration
   - Creato il progetto React Native con struttura modulare:
     config/, i18n/, navigation/, screens/, store/, utils/
   - Configurato Redux Toolkit + RTK Query
   - Integrato react-native-paper con tema personalizzato (theme.ts)

2. Config/
   - apiConfig.ts → definisce BASE_URL e header comuni
   - constants.ts → predisposto per costanti globali
   - env.ts → predisposto per variabili d’ambiente
   - theme.ts → tema custom basato su MD3LightTheme (supporto light/dark mode persistente)

3. i18n/
   - locales/ → predisposti file it.json e en.json (ancora vuoti)

4. Navigation (navigation/)
   - AppNavigator.tsx → gestisce il flusso globale (Splash → Onboarding → Auth → Tab)
   - AuthStack.tsx → stack autenticazione (login, registrazione, recupero/reset password)
   - DrawerNavigator.tsx → connesso alle Tab + voce Impostazioni
   - TabNavigator.tsx → Home, Linee, Servizi, Profilo
   - types.ts → definisce i tipi dei parametri per gli stack navigator
   - SCREEN_TITLES.ts → mappa centralizzata dei titoli delle schermate
     - Utilizzato in header o breadcrumb per titoli coerenti in tutta l’app
     - Contiene traduzioni per Auth, Main, Lines, Services, Profile, Drawer


5. Screens (screens/)
   - auth/
     - LoginScreen.tsx → autenticazione utente + accesso anonimo (usa authApi, authSlice)
     - RegisterScreen.tsx → registrazione nuovo utente
     - ForgotPasswordScreen.tsx → invio email per reset password
     - ResetPasswordScreen.tsx → conferma nuova password
   - splash/
     - SplashScreen.tsx → logo e redirezione iniziale
     - OnboardingScreen.tsx → carosello introduttivo (Accedi, Registrati, Salta)
   - main/
     - HomeScreen.tsx → mappa fullscreen (MapLibre) + BottomSheet informativa
     - SearchScreen.tsx → ricerca di itinerari multimodali
         Componenti usate:
           • PlaceButton.tsx — selezione Partenza/Destinazione (src/components/search/)
           • SwapButton.tsx — inversione dei campi da/a (src/components/search/)
           • DateTimeSelector.tsx — selettore data e ora (src/components/search/)
           • PlaceSearchModal.tsx — modale di ricerca luoghi OSM (src/components/search/)
           • RecentSearches.tsx — storico ricerche utente (src/components/search/)
         Hooks usati:
           • useTrip.ts — calcolo e normalizzazione percorsi (src/hooks/)
           • usePlaces.ts — ricerca luoghi Nominatim (src/hooks/)
           • useSelector (Redux) — lettura token utente
         Funzioni locali:
           • reverseGeocode() — definita internamente alla schermata per risolvere coordinate → nomi OSM
         API:
           • useCreateSearchMutation (searchApi)
           • planTripApi (useTrip)
         Naviga a: ResultsScreen
     - ResultsScreen.tsx → visualizzazione itinerari trovati
         • Riceve “routes” da SearchScreen
         • Mostra lista di rotte e preview su mappa
         • Naviga a: TripDetailsScreen
     - TripDetailsScreen.tsx → dettaglio percorso selezionato
         Componenti usate:
           • MapView.tsx — mappa interattiva (src/components/maps/)
           • RouteDetails.tsx — dettaglio segmenti viaggio (src/components/trip/)
           • BottomSheet — interfaccia a livelli per le tappe
         Hooks usati:
           • useRef, useMemo, useEffect, useTheme (React + Paper)
   - lines/
     - LinesScreen.tsx → elenco linee autobus (ferroviarie da implementare)
   - profile/
     - ProfileScreen.tsx → dati utente, avatar, preferenze trasporto (modale)
   - drawer/
     - SettingsScreen.tsx → impostazioni tema e preferenze
     - FeedbackScreen.tsx → invio feedback e suggerimenti

6. Global State (store/)
   - api/
     - baseQueryWithReauth.ts → estende fetchBaseQuery per gestione automatica refresh JWT
       • intercetta 401 → tenta “token/refresh/”
       • aggiorna access token o esegue clearAuth()
       • utilizzato in authApi.ts
     - authApi.ts → autenticazione (login, register, logout, reset password)
       • utilizza baseQueryWithReauth
       • tipizzazione completa request/response
       • hook esportati: useLoginMutation, useRegisterMutation, useLogoutMutation, useForgotPasswordMutation, useResetPasswordMutation
     - userApi.ts → gestione profilo e preferenze utente
     - searchApi.ts → gestione ricerche (createSearch, getSearches)
     - planTripApi.ts → pianificazione percorsi (endpoint /plan)
   - slices/
     - authSlice.ts → stato autenticazione (access, refresh, user, isAnonymous)
       • azioni: setCredentials, updateAccessToken, clearAuth, setAnonymous
       • integrato con baseQueryWithReauth
     - userSlice.ts → dati utente aggiuntivi (username, email, codice fiscale, preferenze)
     - onboardingSlice.ts → flag completamento onboarding
   - persistConfig.ts → configurazione persistenza Redux (AsyncStorage)
       • authPersistConfig → salva access, refresh, user, isAnonymous
       • onboardingPersistConfig → salva completed
   - store.ts → configurazione Redux Store principale

7. Components (components/)
   - search/
     - PlaceButton.tsx → pulsante per selezione luoghi (usato in SearchScreen)
     - SwapButton.tsx → inversione rapida campi (usato in SearchScreen)
     - DateTimeSelector.tsx → selettore data/ora (usato in SearchScreen)
     - PlaceSearchModal.tsx → ricerca OSM + posizione GPS (usa useCurrentLocation)
     - RecentSearches.tsx → elenco ricerche precedenti (usato in SearchScreen)
   - trip/
     - RouteDetails.tsx → dettaglio tappe viaggio (segmenti walk/bus/train) (usato in TripDetailsScreen)
   - maps/
     - MapView.tsx → mappa OSM (MapLibre), usata in HomeScreen e TripDetailsScreen

8. Hooks (hooks/)
   - useCurrentLocation.ts → ottiene posizione GPS, gestisce permessi
       • usato in PlaceSearchModal.tsx
   - usePlaces.ts → ricerca luoghi via Nominatim (debounce 500ms)
       • usato in SearchScreen.tsx e PlaceSearchModal.tsx
   - useTrip.ts → pianificazione viaggio + normalizzazione (planTripApi + normalizeRoutes)
       • usato in SearchScreen.tsx

9. Utils (utils/)
   - normalizeRoutes.ts → converte risposte Valhalla/backend in formato standard
       • usato in useTrip.ts
   - errorHandler.ts → gestione errori API

10. Implemented Features Summary
   - Splash + Onboarding centralizzati (Redux persist)
   - Accesso anonimo persistente
   - Login/Registrazione/Reset Password collegati al backend
   - Gestione JWT (access + refresh token) automatica con baseQueryWithReauth
   - Tema chiaro/scuro persistente
   - Drawer personalizzato con header grafico
   - Mappa fullscreen (MapLibre)
   - BottomSheet integrata in Home e TripDetailsScreen
   - Ricerca → Risultati → Dettagli viaggio (flusso completo)
   - Linee autobus e ferroviarie
   - Feedback utente (backend integrato)
   - Modularizzazione completa di componenti, hooks e utils
   - SCREEN_TITLES.ts per titoli centralizzati delle schermate

11. Features in Development
   - TripPlanner avanzato con tappe interattive
   - Gamification e rewards (punti, badge, classifiche)
   - Cronologia e statistiche CO₂ nel profilo utente
   - Supporto multilingua (i18n)
   - Notifiche push
   - Layer eventi e punti di interesse (integrazione futura MaaS)

--------------------------------------
